---
version: '3'
tasks:
  init:
    desc: Terraform init
    summary: Terraform init
    aliases: [tfi, tf-init, tfinit]
    cmds:
      - cmd: terraform -chdir=$WORKING_DIR init
    preconditions:
      - sh: terraform --version
        msg: '`terraform` binary was not found in PATH'
  # ──────────────────────────────────────────────────────────────────────────────
  validate:
    desc: Terraform validate
    summary: Terraform validate
    aliases: [tfv, tf-validate, tfvalidate, validate-terraform]
    deps: [init]
    cmds:
      - cmd: terraform validate
    status:
      - '[ -d "{{.ROOT_DIR}}/.terraform" ] && exit 0 || exit 1'
    preconditions:
      - sh: terraform --version
        msg: '`terraform` binary was not found in PATH'
  # ──────────────────────────────────────────────────────────────────────────────
  plan:
    desc: Terraform plan
    summary: Terraform plan
    aliases: [tfp, tf-plan, tfplan]
    deps: [init]
    cmds:
      - cmd: terraform -chdir=$WORKING_DIR plan"
    preconditions:
      - sh: terraform --version
        msg: '`terraform` binary was not found in PATH'
  # ──────────────────────────────────────────────────────────────────────────────
  apply:
    desc: Terraform apply
    summary: Terraform apply
    aliases: [tfa, tf-apply, tfapply]
    deps: [init]
    cmds:
      - terraform -chdir=$WORKING_DIR apply -auto-approve"
    preconditions:
      - sh: terraform --version
        msg: '`terraform` binary was not found in PATH'
  # ──────────────────────────────────────────────────────────────────────────────
  destroy:
    desc: Terraform Destroy
    summary: Terraform Destroy
    aliases: [tfd, tf-destroy, tfdestroy]
    cmds:
      - terraform -chdir=$WORKING_DIR apply -auto-approve -destroy
    preconditions:
      - sh: terraform --version
        msg: '`terraform` binary was not found in PATH'
  # ──────────────────────────────────────────────────────────────────────────────
  format:
    desc: Format Terraform files
    summary: Format Terraform files
    aliases: [fmt, tf-fmt, tffmt, fmt-terraform]
    cmds:
      - cmd: |
          powershell -c '
          $files=(git ls-files --exclude-standard "*.tfvars" "*.tf");
          $files+=(git ls-files --exclude-standard --others "*.tfvars" "*.tf");
          foreach ($file in $files) {
            if ((Get-Item $file).Extension -in ".tf", ".tfvars") {
              terraform fmt -write=true "$file"
            }
          }'
        platforms: [windows]
      - cmd: |
          while read file; do
            terraform fmt -write=true "${file}"
          done < <( \
            git ls-files --exclude-standard '*.tfvars' '*.tf' ; \
            git ls-files --exclude-standard --others '*.tfvars' '*.tf' ; \
          )
        platforms: [linux, darwin]
    preconditions:
      - sh: terraform --version
        msg: '`terraform` binary was not found in PATH'
      - sh: git --version
        msg: '`git` binary was not found in PATH'
  # ──────────────────────────────────────────────────────────────────────────────
  docs:
    desc: Update Terraform docs
    summary: Update Terraform docs
    cmds:
      - cmd: |
          terraform-docs markdown
          --config .terraform-docs.yml
          --output-file foo.md .
    preconditions:
      - sh: terraform-docs --version
        msg: '`terraform-docs` binary was not found in PATH'
  # ──────────────────────────────────────────────────────────────────────────────
  tflint:
    desc: tflint - A Pluggable Terraform Linter
    summary: tflint - A Pluggable Terraform Linter
    cmds:
      - cmd: tflint --init
      - cmd: |
          powershell -c '
            $files=(git ls-files --exclude-standard "*.tfvars");
            $files+=(git ls-files --exclude-standard --others "*.tfvars");
            $COMMAND=@();
            $COMMAND+=("tflint","--chdir","$WORKING_DIR");
            foreach ($file in $files) {
              $COMMAND+=@("--tfvars-file", "`"$file`"") };
              $COMMAND+=@(";");
              Invoke-Expression ($COMMAND -join " ")'
        platforms: [windows]
      - cmd: |
          COMMAND=("tflint" "--chdir" "${WORKING_DIR}")
          while read file; do
            COMMAND+=("--var-file" "$file")
          done < <( \
            git ls-files --exclude-standard "*.tfvars" ; \
            git ls-files --exclude-standard --others "*.tfvars"; \
          ) ;
          "${COMMAND[@]}"
        platforms: [linux, darwin]
    preconditions:
      - sh: tflint --version
        msg: '`tflint` binary was not found in PATH'
  # ──────────────────────────────────────────────────────────────────────────────
  tfsec:
    desc: >
      tfsec - a simple tool to detect
      potential security vulnerabilities
      in your terraformed infrastructure.
    summary: >
      tfsec - a simple tool to detect
      potential security vulnerabilities
      in your terraformed infrastructure.
    cmds:
      # https://stackoverflow.com/q/26705846
      - cmd: |
          powershell -c '
              $files=(git ls-files --exclude-standard "*.tfvars");
              $files+=(git ls-files --exclude-standard --others "*.tfvars");
              $COMMAND=@();
              $COMMAND+=("tfsec",".");
              foreach ($file in $files) {
                $COMMAND+=@("--tfvars-file", "`"$file`"")
              };
              $COMMAND+=@(";");
              Invoke-Expression ($COMMAND -join " ")'
        platforms: [windows]
      - cmd: |
          COMMAND=("tfsec" ".")
          while read file; do
            COMMAND+=("--var-file" "$file")
          done < <( \
            git ls-files --exclude-standard "*.tfvars" ; \
            git ls-files --exclude-standard --others "*.tfvars" \
            ) ;
          "${COMMAND[@]}"
        platforms: [linux, darwin]
    preconditions:
      - sh: tfsec --version
        msg: '`tfsec` binary was not found in PATH'
